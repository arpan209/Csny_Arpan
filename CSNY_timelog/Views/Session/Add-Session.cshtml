@model CSNY_timelog.ViewModel.AddSessionViewModel
@using Telerik.Web;
@using Telerik.Web.Mvc;
@using Telerik.Web.Mvc.UI;
@using GridMvc.Html;




@{
    ViewBag.Title = "Add-Session";
    Layout = "~/Views/Shared/_LayoutPage1.cshtml";
}

  <link href="@Url.Content("~/Content/themes/base/jquery.ui.core.css")" 
        rel="stylesheet" type="text/css" />
    <link href="@Url.Content("~/Content/themes/base/jquery.ui.datepicker.css")" 
        rel="stylesheet"  type="text/css" />
    <link href="@Url.Content("~/Content/themes/base/jquery.ui.theme.css")" 
        rel="stylesheet" type="text/css" />
<link href="@Url.Content("~/css/chosen.css")" rel="stylesheet"  type="text/css" />

<script src="@Url.Content("~/Scripts/jquery-1.7.2.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery-ui-1.8.20.min.js")" type="text/javascript"></script>

<script src="@Url.Content("~/Scripts/chosen.jquery.js")" type="text/javascript"></script>



<script type="text/javascript">
    $(document).ready(function () {
        var npi = '@Session["NPI"]';
        if(npi == ""){
            window.location.href = '@Url.Content("~/therapist/index")';
        }
        var today = new Date();
        var y = today.getFullYear().toString().substr(2, 2);

       var CustomeArray = ["01/01/" + y, "01/19/" + y, "02/16/" + y, "05/25/" + y, "07/03/" + y, "09/07/" + y, "10/12/" + y, "11/11/" + y, "11/26/" + y, "12/25/" + y];
     
        $('#SessionDate').datepicker({
            beforeShowDay: function (date) {
                var string = jQuery.datepicker.formatDate('mm/dd/y', date);
                return [CustomeArray.indexOf(string) == -1]
            }
            
        });

    

      
        var sessionId = '@Model.SessionId';

        var ServiceList = '@Model.ServiceList'.split(",");
        for (i = 0;i < ServiceList.length - 1; i++) {
        
            document.getElementById(ServiceList[i] + 'Div').style.display = "Block";
        }
        document.getElementById('Child').checked = true;

        if (sessionId != "0") {
            var Location = '@Model.Location';
            var LocationDropDown = document.getElementById('Location');
            LocationDropDown.options[LocationDropDown.selectedIndex].text = Location.trim();
            if ('@Model.GroupType' != '') {
                var GroupType = '@Model.GroupType';
                document.getElementById(GroupType.trim()).checked = true;
            }


           

            var ServiceType = '@Model.ServiceType';
            var ServiceTypeText = '';
            var otherText = '';
            if (ServiceType.indexOf('Other')> -1) {
                var other = ServiceType.trim().split(':');
                ServiceTypeText = other[0].trim();
                otherText = other[1].trim();
            }
            else {
                ServiceTypeText = ServiceType.trim();
            }


            document.getElementById(ServiceTypeText).checked = true;
            document.getElementById('txtSpecifyOther').value = otherText;
          

            var Language = '@Model.Language';
            var LanguageDropDown = document.getElementById('Language');
            if (Language == 'EN') {
                Language = "English";
            }
            else if (Language == 'SP') {
                Language = "Spanish";
            }
            else if (Language == 'RU') {
                Language = "Russian";
            }
            else if (Language == 'GR') {
                Language = "German";
            }
            else if (Language == 'PO') {
                Language = "Polish";
            }
            else { Language = "Cantonese "; }
            LanguageDropDown.options[LanguageDropDown.selectedIndex].text = Language.trim();

            var am = "AM";
            var Start = '@Model.StartAMPM';
            if (Start.indexOf(am) > -1) {
                document.getElementById("StartA").checked = true;
            }
            else {
                document.getElementById("StartP").checked = true;
            }

            var End = '@Model.EndAMPM';
            if (End.indexOf(am) > -1) {
                document.getElementById("EndA").checked = true;
            }
            else {
                document.getElementById("EndP").checked = true;
            }

            var StudName = '@Model.StudentListText';
        }
        else {

            document.getElementById("Child").checked = true;
        }

       
     
        //var StudDropDown = document.getElementById('StudentList');
        ////StudDropDown.options[StudDropDown.selectedIndex].text = StudName.trim();
        //StudDropDown.option[StudDropDown.selected].text = StudName;
        //StudDropDown.sele
        
        
       
        //document.getElementById('FelloList').style.display = "none";

        return Othertitle()

    });

   


    </script>


<script type="text/javascript">

    /**--------------------------
    //* Validate Date Field script- By JavaScriptKit.com
    //* For this script and 100s more, visit http://www.javascriptkit.com
    //* This notice must stay intact for usage
    ---------------------------**/

    function checkdate(input) {
        var validformat = /^\d{2}|\d{1}\/\d{2}|\d{1}\/\d{4}$/ //Basic check for format validity
        var returnval = false
        if (!validformat.test(input))
            alert("Invalid Date Format. Please correct and submit again.")
        else { //Detailed check for valid date ranges
            var monthfield = input.split("/")[0]
            var dayfield = input.split("/")[1]
            var yearfield = input.split("/")[2]
            var dayobj = new Date(yearfield, monthfield - 1, dayfield)
            if ((dayobj.getMonth() + 1 != monthfield) || (dayobj.getDate() != dayfield) || (dayobj.getFullYear() != yearfield))
                alert("Invalid Day, Month, or Year range detected. Please correct and submit again.")
            else
                returnval = true
        }
        if (returnval == false) input.select()
        return returnval
    }

</script>


<script type="text/javascript">

    function Othertitle()
    {
        var OtherTitle = $("input[name=Service]:checked").val();

        if (OtherTitle == "Child") {
            document.getElementById('Student').style.display = "Block";
            document.getElementById('FelloList').style.display = "none";

          document.getElementById('ChildMandate').style.display = "Block";
          

        } else if (OtherTitle == "CS") {

            document.getElementById('Student').style.display = "none";
            document.getElementById('FelloList').style.display = "block";

            document.getElementById('ChildMandate').style.display = "none";


        } else {
            document.getElementById('Student').style.display = "none";
            document.getElementById('FelloList').style.display = "none";

            document.getElementById('ChildMandate').style.display = "none";
        }

        if (OtherTitle == "Other")
        {
            $("#othertitle").show();
        }
        else
        {
            $("#othertitle").hide();
        }
    }
   

    function ShowSession() {
    //var name = document.getElementById('Email').value.toLowerCase();
    var SessionDate = $('#SessionDate').val();
    if (SessionDate != "") {
           
       
           // var filter = /^([a-zA-Z0-9_\.\-])+\@@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/;
         
                $.ajax({
                    type: "POST",                    
                    url: '@Url.Content("~/Session/ShowSession")',                   
                    data: '{SessionDate: "' + SessionDate + '" }',
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (data) {
                        if (data != null)
                        {

                            var url = $(this).data(url);
                            $('#SessionList').load(url);


                        }
                    },
                    failure: function (response) {
                        alert(response);
                    }
                });
            }
        }


     </script>
<script type="text/javascript">
    function validation() {
        var error = ""; 
        var error1 = "";
       
        // Lock Session Logic

        var lock = '@Model.Lock';
        var TodayDate = new Date();
        
        var SessDatevalue = new Date($('#SessionDate').val());
        var dayValue = TodayDate.getDate();
        if (lock == "True") {

            if (SessDatevalue.getYear() < TodayDate.getYear()) {
                if (SessDatevalue.getMonth() == 11 && TodayDate.getMonth() == 0 && dayValue > 5) {
                   
                    alert("Session are locked for this date! \n");
                    return false;
                } else if (SessDatevalue.getMonth() < 11) {
                    alert("Session are locked for this date! \n");
                    return false;
                }
                
            }
            else if (SessDatevalue.getMonth() < TodayDate.getMonth()) {
                //var MonthValue = TodayDate.getMonth() + 1;
                //if (SessDatevalue < new date(MonthValue - 1 + "31"  )) { }
                if (SessDatevalue.getDate() >= 16 && SessDatevalue.getDate() <= 31 && SessDatevalue.getMonth() == (TodayDate.getMonth()-1) && dayValue <=5) {
                } else {
                    alert("Session are locked for this date! \n");
                    return false;
                }
                //if  (dayValue > 5){
                //    alert("Session are locked for this date! \n");
                //    return false;
                //}
            }
          
            else {

                if (SessDatevalue.getDate() >= 1 && SessDatevalue.getDate() <= 15 && SessDatevalue.getMonth() == TodayDate.getMonth() && dayValue <= 20) {
                }
                else if (SessDatevalue.getDate() >= 16 && SessDatevalue.getDate() <= 31 && SessDatevalue.getMonth() == TodayDate.getMonth()) {

                }
                else {
                    alert("Session are locked for this date! \n");
                    return false;
                }
            }
        }
        var SessionDate = $('#SessionDate').val();
        if (SessionDate == null || SessionDate == "") {
            error += "Please Select Session Date.\n";
        }
        var pass = checkdate(SessionDate);
        
        var Location = $('#Location').val();

        if (Location == "") {
            error += "Please select location.\n";
        }
        else if (Location == "--Select a Location--") {
            error += "Please select Location.\n";
        }

        //var GroupSize = $('#GroupSize').val();
        //// alert(StateName);
        //if (GroupSize == "") {
        //    error += "Please select Group Size.\n";
        //}

        var StartTime = $('#StartTime').val();
        // alert(StateName);
        if (StartTime == "") {
            error += "Please select Start Time.\n";
        }
       
        var Start = $('input[name=Start]:checked').val();
        StartTime = StartTime + Start;

        var StartValue = StartTime.split(':');
        SHour = StartValue[0];
       

        var EndTime = $('#EndTime').val();
        // alert(StateName);
        if (EndTime == "") {
            error += "Please select End Time.\n";
        }

        var End = $('input[name=End]:checked').val();
        EndTime = EndTime + End;


        var EndValue = EndTime.split(':');
        EHour = EndValue[0];

        if (Start == "AM" && (SHour == 12 || SHour < 6)) {
            error += "Session start time must be after 6 AM.\n";

        }
        if (End == "AM" && (EHour == 12 || EHour < 6)) {
            error += "Session end time must be after 6 AM.\n";

        }

        if (End == "PM" &&  EHour > 9)
        {
            if (EHour == 12) { }
            else {
                error += "Session end time must be before 9 PM.\n";
            }
        }

        var ServiceType = $('input[name=Service]:checked').val();

        if (ServiceType == "Other") {
            if (document.getElementById('txtSpecifyOther').value == "") {
                error += "Enter Other Title.\n";
            }
            else {
                ServiceType = 'Other : ' + document.getElementById('txtSpecifyOther').value;
            }
        }

        if (ServiceType == "Child") { 
        var Langugage = document.getElementById("Language").value;
        if (Langugage == "") {
            error += "Select the Language.\n";
        }
        else if (Langugage == "--Select a Language--") {
            error += "Please select Langugae.\n";
        }
        var StudentList = "";
        var StudentListText = "";
        var GroupSize = 0;
        var x = document.getElementById("StudentList");
        
        if (x != "") {
            for (var i = 0; i < x.options.length; i++) {
                if (x.options[i].selected == true) {
                    StudentList += x.options[i].value + ",";
                    StudentListText += x.options[i].text + ",";
                    GroupSize += 1;
                }
            }
        }
        if (StudentList == "") {
            error += "Select Student.\n";
        }
        
   
        
        var GroupType = $('input[name=GroupInfo]:checked').val();
        if (GroupType == ""){
            error += "Please select the mandate group type \n";
        }

        if (GroupSize > 1 && GroupType == 'S1') {
           error += "Please select valid mandate group type.\n"
        }
        }
        else if (ServiceType == "CS")
        {
            var FellowList = "";
            var FellowListText = "";
            var x = document.getElementById("FellowList");
        
            if (x != "") {
                for (var i = 0; i < x.options.length; i++) {
                    if (x.options[i].selected == true) {
                        FellowList += x.options[i].value + ",";
                        FellowListText += x.options[i].text + ",";
                        
                        GroupSize += 1;
                    }
                }
            }
            if (FellowList == "") {
                error += "Select Fellow Name.\n";
            }
        
    
        }
        var sessionId = '@Model.SessionId';



    

        // Check for time descripencies
        var StudViewModel =
              {
                  SessionDate: SessionDate, StartTime: StartTime, EndTime: EndTime, SessionId: sessionId

              };

        $.ajax({
            type: "POST",

            url: '@Url.Content("~/Session/CheckSessioTime")',

            async: false,
            data: JSON.stringify(StudViewModel),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (data) {

                if (data != "No Overlap") {
                   
                    error += data + "\n";
                    
                }

            },
            error: function (data) {
                //  alert(data);
            }

        });

    
        /// Check session existe of same date for a child.
        if(ServiceType =="Child"){
        var StudViewModel =
               {
                   SessionDate: SessionDate, StudentList: StudentList, StudentListText: StudentListText, SessionId: sessionId
                   
               };

        $.ajax({
            type: "POST",

            url: '@Url.Content("~/Session/CheckSessioDate")',

                async: false,
                data: JSON.stringify(StudViewModel),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (data) {
                   
                    if (data != "") {
                        var studId = data.split(',');
                        for (var x = 0; x < studId.length - 1; x++) {
                          
                            error += "Session already exist for this date for Student:" + studId[x] + "\n";
                        }
                       

                    } 

                },
            error: function (data) {
                //  alert(data);
            }

        });
            }
       

        ///
        if (error != "") {
            alert(error);
         
            return false;
        }
        else {

            var OrderViewModel =
               {
                   SessionDate: SessionDate, Location: Location,
                   ServiceType: ServiceType, StudentList: StudentList,StudentListText: StudentListText,
                   GroupSize: GroupSize, Language: Langugage, StartTime: StartTime,
                   EndTime: EndTime, GroupType: GroupType, FellowList: FellowList, FellowListText: FellowListText, SessionId: sessionId 
               };

            $.ajax({
                type: "POST",

                url: '@Url.Content("~/Session/AddSession")',
               
                async: false,
                data: JSON.stringify(OrderViewModel),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (data) {

                    if (data == "Success") {
                        
                        window.location.href = '@Url.Content("~/session/session-confirm")';

                       
                    } else {
                        //window.location.href = '@Url.Content("~/session/add-session/")';
                        alert(data);
                    }

                },
               error: function (data) {
                   //  alert(data);
               }

           });
            return true;

        }
    }
</script>

<script>

    function runthis(){
        var i = j= 0;
        i += i + j;
    }
</script>
 
         <div class="main_content">
             <div id="Input">
           <div class="page_heading">
             <p>Session Input</p>
            </div>

                  @if (Convert.ToInt32(Model.SessionId) > 0)
                     {
                    
                            <p style="font-size:14px"><u>Edit Session ID: @Model.SessionId</u></p>
                     }
                  else
                  {
                    <p style="font-size:14px"><u>Add Session Information:</u></p>
                  }
                  @if (!string.IsNullOrEmpty(Model.LastModified))
                     {
                    
                           <p style="font-size:14px">Last Modifed on: @Model.LastModified</p>
                     }


                 
     
           
         

               <div class="editor-label">
              <span style="color:red;">*</span>  <strong> Session date:</strong>
            </div>
          <div class="editor-field">                        
                         @Html.TextBoxFor(model => model.SessionDate, new { @onblur = "ShowSession()" })
                    </div>

             
                      @*@Html.ActionLink("Password policy", "", null, new { id = "passwordPolicy" })*@
              <div style="clear :both;"></div>
            <div class="editor-label">
            <span style="color:red;">*</span>  <b>  Location: </b>
     </div>

     @{
         var LocationList = new List<SelectListItem>();
         var item = new SelectListItem()
         {
             Text = "--Select a Location--",
             Value = ""
         };

         LocationList.Add(item);

         item = new SelectListItem()
         {
             Text = "Office - Queens",
             Value = "Office - Queens"
         };
         LocationList.Add(item);

         item = new SelectListItem()
         {
             Text = "Office - Chelsea",
             Value = "Office - Chelsea"
         };
         LocationList.Add(item);

         item = new SelectListItem()
         {
             Text = "School",
             Value = "School"
         };
         LocationList.Add(item);

         item = new SelectListItem()
         {
             Text = "Home",
             Value = "Home"
         };
         LocationList.Add(item);
}
              <div class="editor-field">
        
         @Html.DropDownListFor(m => m.Location, LocationList)
        
    </div>
              <div style="clear :both;"></div>
                   <div class="editor-label">
              <span style="color:red;">*</span> <strong> Select Service:</strong>
            </div>
                 <div class="editor-field">
            
                  <div id="ChildDiv" style="float:left;width:100%;">
                 <input type="radio" id="Child" name="Service" value="Child" checked onchange="return Othertitle()"/>
                 <span>Child Session</span>
                 <br />
                 </div>
                 <div id="SASDiv" style="float:left;width:100%; display:none">
                <input type="radio" id="SAS" name="Service" value="SAS" onchange="return Othertitle()"/>
                <span>Pre-Approved Paid Admin Services</span>
                <br />
                </div> 
                  <div id="CSDiv" style="float:left;width:100%; display:none">
                 <input type="radio" id="CS" name="Service" value="CS" onchange="return Othertitle()"/>
                 <span>Pre-Approved Supervising </span>
                 <br />
                 </div>
                   <div id="OtherDiv" style="float:left;width:100%;">
                 <input type="radio" id="Other" name="Service" value="Other" onchange="return Othertitle()"/>
                 <span>Other</span>
                 <br />
                 </div>
                 <div id="othertitle" style="display:none">
                       <input type="text"  id="txtSpecifyOther" name="OtherTitle" maxlength="50" />
                 </div>
            </div>

               <div style="clear :both;"></div>

                 @*Student List*@
                 <div id="Student">
                   <div class="editor-label">
                       
              <span style="color:red;">*</span> <strong> Add Students:</strong>
            </div>
      <div class="editor-field">


      
         
            @Html.ListBox("StudentList", Model.Students

     , new

     {

         @class = "chzn-select",
         data_placeholder = "Choose  Student..."

     }
     )
     
         </div>

            </div>
                 @*@Fello List*@

                 <div id="FelloList">
                     <div class="editor-label">

                         <span style="color: red;">*</span> <strong>Add Fellow:</strong>
                     </div>
                    <div class="editor-field">
        
            @Html.ListBox("FellowList", Model.Fellow

     , new

     {

         @class = "chzn-select",
         data_placeholder = "Choose  Fellow..."

     }
     )
     

         </div>

                 </div>

                 <div id="ChildMandate">
                <div class="editor-label">
               <span style="color:red;">*</span> <strong>Mandate Group Type ^ :</strong>
            </div>
            <div class="editor-field">
             @*   @Html.TextBoxFor(m => m.GroupSize)*@
               
              <div>Single Mandated Session<input type="radio" name="GroupInfo" value="S1" id="S1" checked/> </div>
              <div>Group Mandated Session<input type="radio" name="GroupInfo" value="SP" id="SP"/> </div>
             @*  <div>SP: <span>@Html.CheckBoxFor(m=>m.SP) </span> </div>
               <div>S1 :<span>@Html.CheckBoxFor(m=>m.S1) </span> </div>*@
                </div>
              
              <div class="editor-label">
                 <span style="color:red;">*</span>  <b>  Language: </b>
     </div>

     @{
         var LanguageList = new List<SelectListItem>();
         var item1 = new SelectListItem()
         {
             Text = "--Select a Language--",
             Value = ""
         };

         LanguageList.Add(item1);

         item1 = new SelectListItem()
         {
             Text = "English",
             Value = "EN"
         };
         LanguageList.Add(item1);

         item1 = new SelectListItem()
         {
             Text = "Spanish",
             Value = "SP"
         };
         LanguageList.Add(item1);

         item1 = new SelectListItem()
         {
             Text = "Russian",
             Value = "RU"
         };
         LanguageList.Add(item1);

         item1 = new SelectListItem()
         {
             Text = "Polish",
             Value = "PL"
         };
         LanguageList.Add(item1);
         item1 = new SelectListItem()
         {
             Text = "Cantonese",
             Value = "CN"
         };
         LanguageList.Add(item1);
}
              <div class="editor-field">
        
         @Html.DropDownListFor(m => m.Language, LanguageList)
        
    </div>
</div>
           <div class="editor-label">
               <span style="color:red;">*</span> <strong>Session Start Time:</strong>
            </div>
            <div class="editor-field">
                @Html.TextBoxFor(m => m.StartTime)
                 <div style="display:inline-block">
            
              <input type="radio" name="Start" id="StartA" value="AM" checked/>AM 
             <div> <input type="radio" name="Start" id="StartP" value="PM"/>PM</div>
                
            </div>     
             </div>
             <div class="editor-label">
               <span style="color:red;">*</span> <strong>Session End Time:</strong>
            </div>
            <div class="editor-field">
             
                 @Html.TextBoxFor(m => m.EndTime)
               <div style="display:inline-block">
            
              <input type="radio" name="End" id="EndA" value="AM" checked/>AM 
             <div> <input type="radio" name="End" id="EndP" value="PM"/>PM</div>
                
            </div>     
             
    </div>

                <div class="editor-label"> &nbsp; </div>
          <div id="SubmitButton" class="editor-field">
                <input type="submit" value="SUBMIT"  id="btn_sbmt" onclick="return validation()" class="input_button" />     
          </div>
                  <div style="clear :both;"></div>
               
                  
                <p>
              <span style="font-size:12px;color:red;padding-left:5px" >
          ^Note: Mandate Group Type:Only for Child Session.  If a child is mandated as a “Group” you must enter “Mandate Group Type” as a “Group Mandated Session” regardless if that child is seen one-on-one (i.e. individual). DO NOT USE individual child session for children mandated as Group.
      </span></p>
                 </div>
     
              </div>
 

<div id="SessionList">


</div>
@*Hookup Chosen Plugin*@
<script >
    
    $(".chzn-select").chosen({ no_results_text: "Oops, nothing found!" });

</script> 